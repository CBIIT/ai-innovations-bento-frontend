// Generated by CodiumAI
import { prepareLinks } from './Anchor';
import { shallow, configure } from 'enzyme';
import Adapter from '@wojtekmaj/enzyme-adapter-react-17';

configure({ adapter: new Adapter() });

describe('prepareLinks', () => {

  // Returns an empty array when given an empty array of properties and data
  it('should return an empty array when given an empty array of properties and data', () => {
    const properties = [];
    const data = {};
    const result = prepareLinks(properties, data);
    expect(result).toEqual([]);
  });

  // Returns a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are no placeholders
  it('should return a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are no placeholders', () => {
    const properties = [
      { link: 'https://example.com', labelLink: 'Example' },
      { link: 'https://google.com', labelLink: 'Google' },
    ];
    const data = {};
    const result = prepareLinks(properties, data);
    expect(result).toEqual(properties);
  });

  // Returns a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are placeholders
  it('should return a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are placeholders', () => {
    const properties = [
      { link: 'https://example.com/{program_id}', labelLink: 'Example {program_id}' },
      { link: 'https://google.com/{program_id}', labelLink: 'Google {program_id}' },
    ];
    const data = { program_id: '123' };
    const result = prepareLinks(properties, data);
    const expected = [
      { link: 'https://example.com/123', labelLink: 'Example 123' },
      { link: 'https://google.com/123', labelLink: 'Google 123' },
    ];
    expect(result).toEqual(expected);
  });

  // Returns a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are multiple placeholders
  it('should return a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are multiple placeholders', () => {
    const properties = [
      { link: 'https://example.com/{program_id}/{user_id}', labelLink: 'Example {program_id} {user_id}' },
      { link: 'https://google.com/{program_id}/{user_id}', labelLink: 'Google {program_id} {user_id}' },
    ];
    const data = { program_id: '123', user_id: '456' };
    const result = prepareLinks(properties, data);
    const expected = [
      { link: 'https://example.com/123/456', labelLink: 'Example 123 456' },
      { link: 'https://google.com/123/456', labelLink: 'Google 123 456' },
    ];
    expect(result).toEqual(expected);
  });

  // Returns a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are placeholders with special characters
  it('should return a new array with the same properties as the input array, except for "link" and "labelLink" with actual values from data when there are placeholders with special characters', () => {
    const properties = [
      { link: 'https://example.com/{program_id}/{user_id}', labelLink: 'Example {program_id} {user_id}' },
      { link: 'https://google.com/{program_id}/{user_id}', labelLink: 'Google {program_id} {user_id}' },
    ];
    const data = { program_id: '123', user_id: '456' };
    const result = prepareLinks(properties, data);
    const expected = [
      { link: 'https://example.com/123/456', labelLink: 'Example 123 456' },
      { link: 'https://google.com/123/456', labelLink: 'Google 123 456' },
    ];
    expect(result).toEqual(expected);
  });

  // Returns a new array with the same length as the input array
  it('should return a new array with the same length as the input array', () => {
    const properties = [{ link: 'link1' }, { link: 'link2' }, { link: 'link3' }];
    const data = { program_id: '123' };
    const result = prepareLinks(properties, data);
    expect(result.length).toBe(properties.length);
  });

  // Returns a new array with the same properties as the input array, except for "link" and "labelLink"
  it('should return a new array with the same properties as the input array, except for "link" and "labelLink"', () => {
    const properties = [{ link: 'link1', labelLink: 'labelLink1', otherProp: 'other1' }, { link: 'link2', labelLink: 'labelLink2', otherProp: 'other2' }];
    const data = { program_id: '123' };
    const result = prepareLinks(properties, data);
    expect(result[0]).toEqual({ otherProp: 'other1' });
    expect(result[1]).toEqual({ otherProp: 'other2' });
  });

  // Replaces placeholders in "link" and "labelLink" properties with actual values from data
  it('should replace placeholders in "link" and "labelLink" properties with actual values from data', () => {
    const properties = [{ link: 'link{program_id}', labelLink: 'labelLink{program_id}' }];
    const data = { program_id: '123' };
    const result = prepareLinks(properties, data);
    expect(result[0].link).toBe('link123');
    expect(result[0].labelLink).toBe('labelLink123');
  });
});
