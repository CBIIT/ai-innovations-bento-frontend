// Generated by CodiumAI

describe('SessionTimeoutGenerator', () => {

  // The component renders correctly with default props.
  it('should render correctly with default props', () => {
    // Mock dependencies
    const withStylesMock = jest.fn().mockReturnValue((component) => component);
    const useSelectorMock = jest.fn();
    const useStateMock = jest.fn();
    const useEffectMock = jest.fn();
    const forwardRefMock = jest.fn().mockImplementation((props) => props.children);

    // Mock the imports
    jest.doMock('react', () => ({
      useEffect: useEffectMock,
      useState: useStateMock,
      forwardRef: forwardRefMock,
    }));
    jest.doMock('react-redux', () => ({
      useSelector: useSelectorMock,
    }));
    jest.doMock('@material-ui/core', () => ({
      withStyles: withStylesMock,
      Button: 'Button',
      Dialog: 'Dialog',
      Typography: 'Typography',
    }));
    jest.doMock('../components/DialogTitle', () => 'DialogTitle');
    jest.doMock('../components/DialogContent', () => 'DialogContent');
    jest.doMock('../components/Transition', () => ({
      Transition: 'Transition',
    }));
    jest.doMock('../Utils/utils', () => ({
      secondsToMinuteString: jest.fn(),
      extendSession: jest.fn(),
      getSessionTTL: jest.fn(),
    }));

    // Import the function under test
    const { SessionTimeoutGenerator } = require('./SessionTimeoutGenerator');

    // Call the function under test
    const { SessionTimeout } = SessionTimeoutGenerator();

    // Assertions
    expect(withStylesMock).toHaveBeenCalledTimes(1);
    expect(withStylesMock).toHaveBeenCalledWith(expect.any(Function), { withTheme: true });

    expect(useSelectorMock).toHaveBeenCalledTimes(1);
    expect(useSelectorMock).toHaveBeenCalledWith(expect.any(Function));

    expect(useStateMock).toHaveBeenCalledTimes(3);
    expect(useStateMock).toHaveBeenCalledWith(false);
    expect(useStateMock).toHaveBeenCalledWith(false);
    expect(useStateMock).toHaveBeenCalledWith(DEFAULT_CONFIG.config.thresholdTime);

    expect(useEffectMock).toHaveBeenCalledTimes(1);
    expect(useEffectMock).toHaveBeenCalledWith(expect.any(Function), [expect.any(Function)]);

    expect(SessionTimeout).toEqual(expect.any(Function));
  });

  // The component renders correctly when the 'config' prop is null.
  it('should render correctly when the \'config\' prop is null', () => {
    // Mock dependencies
    const withStylesMock = jest.fn().mockReturnValue((component) => component);
    const useSelectorMock = jest.fn();
    const useStateMock = jest.fn();
    const useEffectMock = jest.fn();
    const forwardRefMock = jest.fn().mockImplementation((props) => props.children);

    // Mock the imports
    jest.doMock('react', () => ({
      useEffect: useEffectMock,
      useState: useStateMock,
      forwardRef: forwardRefMock,
    }));
    jest.doMock('react-redux', () => ({
      useSelector: useSelectorMock,
    }));
    jest.doMock('@material-ui/core', () => ({
      withStyles: withStylesMock,
      Button: 'Button',
      Dialog: 'Dialog',
      Typography: 'Typography',
    }));
    jest.doMock('../components/DialogTitle', () => 'DialogTitle');
    jest.doMock('../components/DialogContent', () => 'DialogContent');
    jest.doMock('../components/Transition', () => ({
      Transition: 'Transition',
    }));
    jest.doMock('../Utils/utils', () => ({
      secondsToMinuteString: jest.fn(),
      extendSession: jest.fn(),
      getSessionTTL: jest.fn(),
    }));

    // Import the function under test
    const { SessionTimeoutGenerator } = require('./SessionTimeoutGenerator');

    // Call the function under test
    const { SessionTimeout } = SessionTimeoutGenerator({ config: null });

    // Assertions
    expect(withStylesMock).toHaveBeenCalledTimes(1);
    expect(withStylesMock).toHaveBeenCalledWith(expect.any(Function), { withTheme: true });

    expect(useSelectorMock).toHaveBeenCalledTimes(1);
    expect(useSelectorMock).toHaveBeenCalledWith(expect.any(Function));

    expect(useStateMock).toHaveBeenCalledTimes(3);
    expect(useStateMock).toHaveBeenCalledWith(false);
    expect(useStateMock).toHaveBeenCalledWith(false);
    expect(useStateMock).toHaveBeenCalledWith(DEFAULT_CONFIG.config.thresholdTime);

    expect(useEffectMock).toHaveBeenCalledTimes(1);
    expect(useEffectMock).toHaveBeenCalledWith(expect.any(Function), [expect.any(Function)]);

    expect(SessionTimeout).toEqual(expect.any(Function));
  });
});
