// Generated by CodiumAI

describe('extendSession', () => {

  // Sends a POST request to the provided URL with Accept and Content-Type headers set to 'application/json'
  it('should send a POST request with correct headers', async () => {
    const url = 'http://example.com';
    const fetchSpy = jest.spyOn(window, 'fetch').mockResolvedValueOnce({
      json: jest.fn().mockResolvedValueOnce({ status: true }),
    });

    await extendSession(url);

    expect(fetchSpy).toHaveBeenCalledWith(url, {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
    });
  });

  // Handles unsuccessful response with status 400
  it('should return false when response status is 400', async () => {
    const url = 'http://example.com';
    const fetchSpy = jest.spyOn(window, 'fetch').mockResolvedValueOnce({
      json: jest.fn().mockResolvedValueOnce({ status: false }),
    });

    const result = await extendSession(url);

    expect(result).toBe(false);
  });
});

// Generated by CodiumAI

describe('getSessionTTL', () => {

  // Returns the number of seconds until the session expires when a valid url is provided
  it('should return the number of seconds until the session expires when a valid url is provided', async () => {
    const url = 'valid-url';
    const expectedTTL = 60;

    // Mock the fetch function to return the expected response
    global.fetch = jest.fn().mockResolvedValue({
      json: jest.fn().mockResolvedValue({ ttl: expectedTTL }),
    });

    const result = await getSessionTTL(url);

    expect(result).toBe(expectedTTL);
    expect(fetch).toHaveBeenCalledWith(url, {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
    });
  });

  // Returns 0 when the url parameter is empty
  it('should return 0 when the url parameter is empty', async () => {
    const url = '';
    const expectedTTL = 0;

    const result = await getSessionTTL(url);

    expect(result).toBe(expectedTTL);
  });
});

